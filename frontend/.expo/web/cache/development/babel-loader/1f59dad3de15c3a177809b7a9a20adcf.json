{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\downloads\\\\PersonalProject\\\\ReactApp\\\\ReactApp\\\\frontend\\\\components\\\\main\\\\Notification.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUsersData } from \"../../redux/actions\";\n\nfunction Notification(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      userNotifications = _useState2[0],\n      setUserNotifications = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  var currentUser = props.currentUser,\n      notifications = props.notifications;\n  useEffect(function () {\n    if (props.route.params.uid === firebase.auth().currentUser.uid) {\n      console.log(\"Test1\");\n      setUser(currentUser);\n      setUserNotifications(notifications);\n    } else {\n      console.log(\"Test2\");\n      firebase.firestore().collection(\"users\").doc(props.route.params.uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          setUser(snapshot.data());\n        } else {\n          console.log('does not exist');\n        }\n      });\n      firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"notifications\").get().onSnapshot(function (snapshot) {\n        var notifications = snapshot.docs.map(function (doc) {\n          var data = doc.data();\n          var id = doc.id;\n          return _objectSpread({\n            id: id\n          }, data);\n        });\n        setUserNotifications(notifications);\n      });\n    }\n  });\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: userNotifications,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }\n      }, React.createElement(\"text\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }\n      }, \"item.activity\"));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }));\n}\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser,\n    notifications: store.userState.notifications\n  };\n};\n\nexport default connect(mapStateToProps, null)(Notification);","map":{"version":3,"sources":["D:/downloads/PersonalProject/ReactApp/ReactApp/frontend/components/main/Notification.js"],"names":["React","useState","useEffect","firebase","require","connect","bindActionCreators","fetchUsersData","Notification","props","userNotifications","setUserNotifications","user","setUser","currentUser","notifications","route","params","uid","auth","console","log","firestore","collection","doc","get","then","snapshot","exists","data","onSnapshot","docs","map","id","item","mapStateToProps","store","userState"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { View, Text, FlatList, Button, TextInput } from 'react-native'\r\n\r\nimport firebase from 'firebase'\r\nrequire('firebase/firestore')\r\n\r\nimport {connect} from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { fetchUsersData } from '../../redux/actions'\r\n\r\nfunction Notification(props) {\r\n    const [userNotifications, setUserNotifications] = useState([]);\r\n    const [user, setUser] = useState(null);\r\n\r\n    const { currentUser, notifications } = props;\r\n    useEffect(() => { \r\n        if(props.route.params.uid === firebase.auth().currentUser.uid){\r\n            console.log(\"Test1\")\r\n            setUser(currentUser)\r\n            setUserNotifications(notifications)\r\n        } else {\r\n            console.log(\"Test2\")\r\n            firebase.firestore()\r\n            .collection(\"users\")\r\n            .doc(props.route.params.uid)\r\n            .get()\r\n            .then((snapshot) => {\r\n                if(snapshot.exists){\r\n                    setUser(snapshot.data())\r\n                }\r\n                else {\r\n                    console.log('does not exist')\r\n                }\r\n            })\r\n            firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"notifications\")\r\n            .get()\r\n            .onSnapshot((snapshot) => {\r\n            let notifications = snapshot.docs.map(doc => {\r\n                const data = doc.data();\r\n                const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                setUserNotifications(notifications)\r\n            })\r\n        }\r\n    })\r\n    \r\n    return (\r\n        <View>\r\n        <FlatList\r\n            data={userNotifications}\r\n            renderItem={({ item }) => (\r\n                    <View>\r\n                        <text>item.activity</text>\r\n                    </View>\r\n                )}\r\n        />\r\n        </View>\r\n    )\r\n}  \r\n/*    const [comments, setComments] = useState([])\r\n    const [postId, setPostId] = useState(\"\")\r\n    const [text, setText] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n\r\n        function matchUserToComment(comments){\r\n            for(let i = 0; i < comments.length; i++) {\r\n\r\n                if(comments[i].hasOwnProperty('user')){\r\n                    continue;\r\n                }\r\n                const user = props.users.find(x => x.uid === comments[i].creator)\r\n                if(user == undefined) {\r\n                    props.fetchUsersData(comments[i].creator, false)\r\n                } else {\r\n                    comments[i].user = user\r\n                }\r\n            }\r\n            setComments(comments)\r\n        }\r\n\r\n\r\n        if(props.route.params.postId !== postId) {\r\n            firebase.firestore()\r\n            .collection('posts')\r\n            .doc(props.route.params.uid)\r\n            .collection('userPosts')\r\n            .doc(props.route.params.postId)\r\n            .collection('comments')\r\n            .get()\r\n            .then((snapshot) => {\r\n                let comments = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return {id, ...data}\r\n                })\r\n                matchUserToComment(comments)\r\n            })\r\n            setPostId(props.route.params.postId)\r\n        } else {\r\n            matchUserToComment(comments)\r\n        }\r\n\r\n    }, [props.route.params.postId, props.user])\r\n\r\n    const onCommentSend = () => {\r\n        firebase.firestore()\r\n        .collection('posts')\r\n        .doc(props.route.params.uid)\r\n        .collection('userPosts')\r\n        .doc(props.route.params.postId)\r\n        .collection('comments')\r\n        .add({\r\n            creator: firebase.auth().currentUser.uid,\r\n            text\r\n        })\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <FlatList\r\n                numColumns={1}\r\n                horizontal={false}\r\n                data={comments}\r\n                renderItem={({item}) => (\r\n                    <View>\r\n                        {item.user !== undefined ?\r\n                        <Text>\r\n                            {item.user.name}\r\n                        </Text>\r\n                    : null}\r\n                        <Text>{item.text}</Text>\r\n                    </View>\r\n                )}\r\n            />\r\n        </View>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (store) => ({\r\n    users: store.usersState.users\r\n\r\n})\r\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUsersData }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(Notification);\r\n*/\r\nconst mapStateToProps = (store) => ({\r\n    currentUser: store.userState.currentUser,\r\n    notifications: store.userState.notifications,\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(Notification);\r\n"]},"metadata":{},"sourceType":"module"}