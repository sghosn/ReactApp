{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\PersonalProject\\\\ReactApp\\\\ReactApp\\\\frontend\\\\components\\\\main\\\\SaveProfile.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport firebase from 'firebase';\nimport { NavigationContainer } from '@react-navigation/native';\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-storage\");\n\nexport default function SaveProfile(props, _ref) {\n  var navigation = _ref.navigation;\n  var childPath = \" users/\" + firebase.auth().currentUser.uid + \"/\" + Math.random().toString(36);\n  console.log(childPath);\n\n  var uploadImage = function uploadImage() {\n    var uri, response, blob, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            uri = props.route.params.image;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 6:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePostData(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL) {\n    firebase.firestore().collection('users').doc(firebase.auth().currentUser.uid).update({\n      profilePic: downloadURL\n    }).then(function () {\n      props.navigation.popToTop();\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: props.route.params.image\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Save\",\n    onPress: function onPress() {\n      return uploadImage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["D:/downloads/PersonalProject/ReactApp/ReactApp/frontend/components/main/SaveProfile.js"],"names":["React","useState","firebase","NavigationContainer","require","SaveProfile","props","navigation","childPath","auth","currentUser","uid","Math","random","toString","console","log","uploadImage","uri","route","params","image","fetch","response","blob","task","storage","ref","child","put","taskProgress","snapshot","bytesTransferred","taskCompleted","getDownloadURL","then","savePostData","taskError","on","downloadURL","firestore","collection","doc","update","profilePic","popToTop","flex"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,mBAAT,QAAoC,0BAApC;;AACAC,OAAO,CAAC,oBAAD,CAAP;;AACAA,OAAO,CAAC,2BAAD,CAAP;;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,QAA4C;AAAA,MAAdC,UAAc,QAAdA,UAAc;AACvD,MAAMC,SAAS,eAAaN,QAAQ,CAACO,IAAT,GAAgBC,WAAhB,CAA4BC,GAAzC,SAAgDC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,CAA/D;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;;AAEA,MAAMS,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,YAAAA,GADU,GACJZ,KAAK,CAACa,KAAN,CAAYC,MAAZ,CAAmBC,KADf;AAAA;AAAA,6CAGOC,KAAK,CAACJ,GAAD,CAHZ;;AAAA;AAGVK,YAAAA,QAHU;AAAA;AAAA,6CAIGA,QAAQ,CAACC,IAAT,EAJH;;AAAA;AAIVA,YAAAA,IAJU;AAMVC,YAAAA,IANU,GAMHvB,QAAQ,CAChBwB,OADQ,GAERC,GAFQ,GAGRC,KAHQ,CAGFpB,SAHE,EAIRqB,GAJQ,CAIJL,IAJI,CANG;;AAYVM,YAAAA,YAZU,GAYK,SAAfA,YAAe,CAAAC,QAAQ,EAAI;AAC7BhB,cAAAA,OAAO,CAACC,GAAR,mBAA4Be,QAAQ,CAACC,gBAArC;AACH,aAde;;AAgBVC,YAAAA,aAhBU,GAgBM,SAAhBA,aAAgB,GAAM;AACxBR,cAAAA,IAAI,CAACM,QAAL,CAAcJ,GAAd,CAAkBO,cAAlB,GAAmCC,IAAnC,CAAwC,UAACJ,QAAD,EAAc;AAClDK,gBAAAA,YAAY,CAACL,QAAD,CAAZ;AACH,eAFD;AAGH,aApBe;;AAsBVM,YAAAA,SAtBU,GAsBE,SAAZA,SAAY,CAAAN,QAAQ,EAAI;AAC1BhB,cAAAA,OAAO,CAACC,GAAR,CAAYe,QAAZ;AACH,aAxBe;;AA0BhBN,YAAAA,IAAI,CAACa,EAAL,CAAQ,eAAR,EAAyBR,YAAzB,EAAuCO,SAAvC,EAAkDJ,aAAlD;;AA1BgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AA6BA,MAAMG,YAAY,GAAG,SAAfA,YAAe,CAACG,WAAD,EAAiB;AAClCrC,IAAAA,QAAQ,CAACsC,SAAT,GACKC,UADL,CACgB,OADhB,EAEKC,GAFL,CAESxC,QAAQ,CAACO,IAAT,GAAgBC,WAAhB,CAA4BC,GAFrC,EAGKgC,MAHL,CAGY;AACJC,MAAAA,UAAU,EAAEL;AADR,KAHZ,EAKOJ,IALP,CAKa,YAAW;AAChB7B,MAAAA,KAAK,CAACC,UAAN,CAAiBsC,QAAjB;AACH,KAPL;AAQH,GATD;;AAUA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAG;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAC5B,MAAAA,GAAG,EAAEZ,KAAK,CAACa,KAAN,CAAYC,MAAZ,CAAmBC;AAAzB,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,OAAO,EAAE;AAAA,aAAMJ,WAAW,EAAjB;AAAA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH","sourcesContent":["import React, { useState } from 'react'\r\nimport { View, TextInput, Image, Button } from 'react-native'\r\nimport firebase from 'firebase'\r\nimport { NavigationContainer } from '@react-navigation/native'\r\nrequire(\"firebase/firestore\")\r\nrequire(\"firebase/firebase-storage\")\r\n\r\nexport default function SaveProfile(props, { navigation }) {\r\n    const childPath = ` users/${firebase.auth().currentUser.uid}/${Math.random().toString(36)}`\r\n    console.log(childPath)\r\n\r\n    const uploadImage = async () => {\r\n        const uri = props.route.params.image;\r\n\r\n        const response = await fetch(uri);\r\n        const blob = await response.blob();\r\n\r\n        const task = firebase\r\n            .storage()\r\n            .ref()\r\n            .child(childPath)\r\n            .put(blob);\r\n        \r\n        const taskProgress = snapshot => {\r\n            console.log(`transferred: ${snapshot.bytesTransferred}`)\r\n        }\r\n\r\n        const taskCompleted = () => {\r\n            task.snapshot.ref.getDownloadURL().then((snapshot) => {\r\n                savePostData(snapshot)\r\n            })\r\n        }\r\n\r\n        const taskError = snapshot => {\r\n            console.log(snapshot)\r\n        }\r\n\r\n        task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\r\n    }\r\n\r\n    const savePostData = (downloadURL) => {\r\n        firebase.firestore()\r\n            .collection('users')\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .update({\r\n                profilePic: downloadURL,\r\n            }).then((function() {\r\n                props.navigation.popToTop()\r\n            }))\r\n    }\r\n    return (\r\n        <View style ={{flex: 1}}>\r\n            <Image source={{uri: props.route.params.image}}/>\r\n            <Button title=\"Save\" onPress={() => uploadImage()}/>\r\n        </View>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}