{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\downloads\\\\PersonalProject\\\\ReactApp\\\\ReactApp\\\\frontend\\\\components\\\\main\\\\Comment.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUsersData } from \"../../redux/actions\";\n\nfunction Comment(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postId = _useState4[0],\n      setPostId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text = _useState6[0],\n      setText = _useState6[1];\n\n  useEffect(function () {\n    function matchUserToComment(comments) {\n      var _loop = function _loop(i) {\n        if (comments[i].hasOwnProperty('user')) {\n          return \"continue\";\n        }\n\n        var user = props.users.find(function (x) {\n          return x.uid === comments[i].creator;\n        });\n\n        if (user == undefined) {\n          props.fetchUsersData(comments[i].creator, false);\n        } else {\n          comments[i].user = user;\n        }\n      };\n\n      for (var i = 0; i < comments.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      setComments(comments);\n    }\n\n    if (props.route.params.postId !== postId) {\n      firebase.firestore().collection('posts').doc(props.route.params.uid).collection('userPosts').doc(props.route.params.postId).collection('comments').get().then(function (snapshot) {\n        var comments = snapshot.docs.map(function (doc) {\n          var data = doc.data();\n          var id = doc.id;\n          return _objectSpread({\n            id: id\n          }, data);\n        });\n        matchUserToComment(comments);\n      });\n      setPostId(props.route.params.postId);\n    } else {\n      matchUserToComment(comments);\n    }\n  }, [props.route.params.postId, props.user]);\n\n  var onCommentSend = function onCommentSend() {\n    firebase.firestore().collection('posts').doc(props.route.params.uid).collection('userPosts').doc(props.route.params.postId).collection('comments').add({\n      creator: firebase.auth().currentUser.uid,\n      text: text\n    });\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    numColumns: 1,\n    horizontal: false,\n    data: comments,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, item.user !== undefined ? React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }\n      }, item.user.name) : null, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }\n      }, item.text));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"comment...\",\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return onCommentSend();\n    },\n    title: \"Send\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  })));\n}\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    users: store.usersState.users\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUsersData: fetchUsersData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(Comment);","map":{"version":3,"sources":["D:/downloads/PersonalProject/ReactApp/ReactApp/frontend/components/main/Comment.js"],"names":["React","useState","useEffect","firebase","require","connect","bindActionCreators","fetchUsersData","Comment","props","comments","setComments","postId","setPostId","text","setText","matchUserToComment","i","hasOwnProperty","user","users","find","x","uid","creator","undefined","length","route","params","firestore","collection","doc","get","then","snapshot","docs","map","data","id","onCommentSend","add","auth","currentUser","item","name","mapStateToProps","store","usersState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { View, Text, FlatList, Button, TextInput } from 'react-native'\r\n\r\nimport firebase from 'firebase'\r\nrequire('firebase/firestore')\r\n\r\nimport {connect} from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { fetchUsersData } from '../../redux/actions'\r\n\r\nfunction Comment(props) {\r\n    const [comments, setComments] = useState([])\r\n    const [postId, setPostId] = useState(\"\")\r\n    const [text, setText] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n\r\n        function matchUserToComment(comments){\r\n            for(let i = 0; i < comments.length; i++) {\r\n\r\n                if(comments[i].hasOwnProperty('user')){\r\n                    continue;\r\n                }\r\n                const user = props.users.find(x => x.uid === comments[i].creator)\r\n                if(user == undefined) {\r\n                    props.fetchUsersData(comments[i].creator, false)\r\n                } else {\r\n                    comments[i].user = user\r\n                }\r\n            }\r\n            setComments(comments)\r\n        }\r\n\r\n\r\n        if(props.route.params.postId !== postId) {\r\n            firebase.firestore()\r\n            .collection('posts')\r\n            .doc(props.route.params.uid)\r\n            .collection('userPosts')\r\n            .doc(props.route.params.postId)\r\n            .collection('comments')\r\n            .get()\r\n            .then((snapshot) => {\r\n                let comments = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return {id, ...data}\r\n                })\r\n                matchUserToComment(comments)\r\n            })\r\n            setPostId(props.route.params.postId)\r\n        } else {\r\n            matchUserToComment(comments)\r\n        }\r\n\r\n    }, [props.route.params.postId, props.user])\r\n\r\n    const onCommentSend = () => {\r\n        firebase.firestore()\r\n        .collection('posts')\r\n        .doc(props.route.params.uid)\r\n        .collection('userPosts')\r\n        .doc(props.route.params.postId)\r\n        .collection('comments')\r\n        .add({\r\n            creator: firebase.auth().currentUser.uid,\r\n            text\r\n        })\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <FlatList\r\n                numColumns={1}\r\n                horizontal={false}\r\n                data={comments}\r\n                renderItem={({item}) => (\r\n                    <View>\r\n                        {item.user !== undefined ?\r\n                        <Text>\r\n                            {item.user.name}\r\n                        </Text>\r\n                    : null}\r\n                        <Text>{item.text}</Text>\r\n                    </View>\r\n                )}\r\n            />\r\n\r\n            <View>\r\n                <TextInput \r\n                placeholder='comment...'\r\n                onChangeText={(text) => setText(text)}/>\r\n                <Button\r\n                    onPress={() => onCommentSend()}\r\n                    title=\"Send\"\r\n                />  \r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (store) => ({\r\n    users: store.usersState.users\r\n\r\n})\r\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUsersData }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(Comment);"]},"metadata":{},"sourceType":"module"}