{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"contentContainerStyle\", \"style\", \"onContentSizeChange\", \"children\", \"refreshControl\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { IS_IOS } from \"./helpers\";\nimport { useAfterMountEffect, useChainCallback, useCollapsibleStyle, useScrollHandlerY, useSharedAnimatedRef, useTabNameContext, useTabsContext, useUpdateScrollViewContentSize } from \"./hooks\";\nexport var ScrollView = React.forwardRef(function (_ref, passRef) {\n  var contentContainerStyle = _ref.contentContainerStyle,\n      style = _ref.style,\n      onContentSizeChange = _ref.onContentSizeChange,\n      children = _ref.children,\n      refreshControl = _ref.refreshControl,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var name = useTabNameContext();\n  var ref = useSharedAnimatedRef(passRef);\n\n  var _useTabsContext = useTabsContext(),\n      setRef = _useTabsContext.setRef,\n      contentInset = _useTabsContext.contentInset,\n      scrollYCurrent = _useTabsContext.scrollYCurrent;\n\n  var _useCollapsibleStyle = useCollapsibleStyle(),\n      _style = _useCollapsibleStyle.style,\n      _contentContainerStyle = _useCollapsibleStyle.contentContainerStyle,\n      progressViewOffset = _useCollapsibleStyle.progressViewOffset;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      canBindScrollEvent = _React$useState2[0],\n      setCanBindScrollEvent = _React$useState2[1];\n\n  useAfterMountEffect(function () {\n    setCanBindScrollEvent(true);\n  });\n  var scrollHandler = useScrollHandlerY(name, {\n    enabled: canBindScrollEvent\n  });\n  React.useEffect(function () {\n    setRef(name, ref);\n  }, [name, ref, setRef]);\n  var scrollContentSizeChange = useUpdateScrollViewContentSize({\n    name: name\n  });\n  var scrollContentSizeChangeHandlers = useChainCallback(scrollContentSizeChange, onContentSizeChange);\n  return React.createElement(Animated.ScrollView, _extends({}, rest, {\n    ref: ref,\n    bouncesZoom: false,\n    style: [_style, style],\n    contentContainerStyle: [_contentContainerStyle, contentContainerStyle],\n    onScroll: scrollHandler,\n    onContentSizeChange: scrollContentSizeChangeHandlers,\n    scrollEventThrottle: 16,\n    contentInset: {\n      top: contentInset\n    },\n    contentOffset: {\n      y: IS_IOS ? -contentInset + scrollYCurrent.value : 0,\n      x: 0\n    },\n    automaticallyAdjustContentInsets: false,\n    refreshControl: refreshControl && React.cloneElement(refreshControl, _objectSpread({\n      progressViewOffset: progressViewOffset\n    }, refreshControl.props))\n  }), children);\n});","map":{"version":3,"sources":["ScrollView.tsx"],"names":["ScrollView","rest","name","useTabNameContext","ref","useSharedAnimatedRef","scrollYCurrent","useTabsContext","style","contentContainerStyle","progressViewOffset","useCollapsibleStyle","React","useAfterMountEffect","setCanBindScrollEvent","scrollHandler","useScrollHandlerY","enabled","canBindScrollEvent","setRef","scrollContentSizeChange","useUpdateScrollViewContentSize","scrollContentSizeChangeHandlers","useChainCallback","top","contentInset","y","IS_IOS","x","refreshControl","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AAEA,OAAA,QAAA,MAAA,yBAAA;AAEA,SAAA,MAAA;AACA,SAAA,mBAAA,EAAA,gBAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,8BAAA;AAcA,OAAO,IAAMA,UAAU,GAAG,KAAK,CAAL,UAAA,CAIxB,gBAAA,OAAA,EAUK;AAAA,MATH,qBASG,QATH,qBASG;AAAA,MATH,KASG,QATH,KASG;AAAA,MATH,mBASG,QATH,mBASG;AAAA,MATH,QASG,QATH,QASG;AAAA,MATH,cASG,QATH,cASG;AAAA,MAHEC,IAGF;;AACH,MAAMC,IAAI,GAAGC,iBAAb,EAAA;AACA,MAAMC,GAAG,GAAGC,oBAAoB,CAAhC,OAAgC,CAAhC;;AACA,wBAAiDE,cAAjD,EAAA;AAAA,MAAM,MAAN,mBAAM,MAAN;AAAA,MAAM,YAAN,mBAAM,YAAN;AAAA,MAA8BD,cAA9B,mBAA8BA,cAA9B;;AACA,6BAIIK,mBAJJ,EAAA;AAAA,MAAM,MAAN,wBACEH,KADF;AAAA,MAAM,sBAAN,wBAEEC,qBAFF;AAAA,MAGEC,kBAHF,wBAGEA,kBAHF;;AAKA,wBAAoDE,KAAK,CAALA,QAAAA,CAApD,KAAoDA,CAApD;AAAA;AAAA,MAAM,kBAAN;AAAA,MAAM,qBAAN;;AAEAC,EAAAA,mBAAmB,CAAC,YAAM;AAGxBC,IAAAA,qBAAqB,CAArBA,IAAqB,CAArBA;AAHFD,GAAmB,CAAnBA;AAMA,MAAME,aAAa,GAAGC,iBAAiB,CAAA,IAAA,EAAO;AAC5CC,IAAAA,OAAO,EAAEC;AADmC,GAAP,CAAvC;AAIAN,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBO,IAAAA,MAAM,CAAA,IAAA,EAANA,GAAM,CAANA;AADFP,GAAAA,EAEG,CAAA,IAAA,EAAA,GAAA,EAFHA,MAEG,CAFHA;AAIA,MAAMQ,uBAAuB,GAAGC,8BAA8B,CAAC;AAC7DnB,IAAAA,IAAAA,EAAAA;AAD6D,GAAD,CAA9D;AAIA,MAAMoB,+BAA+B,GAAGC,gBAAgB,CAAA,uBAAA,EAAxD,mBAAwD,CAAxD;AAKA,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAGE,IAAA,GAAG,EAHL,GAAA;AAIE,IAAA,WAAW,EAJb,KAAA;AAKE,IAAA,KAAK,EAAE,CAAA,MAAA,EALT,KAKS,CALT;AAME,IAAA,qBAAqB,EAAE,CAAA,sBAAA,EANzB,qBAMyB,CANzB;AAWE,IAAA,QAAQ,EAXV,aAAA;AAYE,IAAA,mBAAmB,EAZrB,+BAAA;AAaE,IAAA,mBAAmB,EAbrB,EAAA;AAcE,IAAA,YAAY,EAAE;AAAEC,MAAAA,GAAG,EAAEC;AAAP,KAdhB;AAeE,IAAA,aAAa,EAAE;AACbC,MAAAA,CAAC,EAAEC,MAAM,GAAG,CAAA,YAAA,GAAgBrB,cAAc,CAAjC,KAAA,GADI,CAAA;AAEbsB,MAAAA,CAAC,EAAE;AAFU,KAfjB;AAmBE,IAAA,gCAAgC,EAnBlC,KAAA;AAoBE,IAAA,cAAc,EACZC,cAAc,IACd,KAAK,CAAL,YAAA,CAAA,cAAA;AACEnB,MAAAA,kBADiC,EACjCA;AADF,OAEKmB,cAAc,CAACC,KAFpB;AAtBJ,GAAA,CAAA,EADF,QACE,CADF;AAhDG,CAAmB,CAAnB","sourcesContent":["import React from 'react'\nimport { ScrollViewProps, ScrollView as RNScrollView } from 'react-native'\nimport Animated from 'react-native-reanimated'\n\nimport { IS_IOS } from './helpers'\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\n/**\n * Use like a regular ScrollView.\n */\nexport const ScrollView = React.forwardRef<\n  RNScrollView,\n  React.PropsWithChildren<Omit<ScrollViewProps, 'onScroll'>>\n>(\n  (\n    {\n      contentContainerStyle,\n      style,\n      onContentSizeChange,\n      children,\n      refreshControl,\n      ...rest\n    },\n    passRef\n  ) => {\n    const name = useTabNameContext()\n    const ref = useSharedAnimatedRef<RNScrollView>(passRef)\n    const { setRef, contentInset, scrollYCurrent } = useTabsContext()\n    const {\n      style: _style,\n      contentContainerStyle: _contentContainerStyle,\n      progressViewOffset,\n    } = useCollapsibleStyle()\n    const [canBindScrollEvent, setCanBindScrollEvent] = React.useState(false)\n\n    useAfterMountEffect(() => {\n      // we enable the scroll event after mounting\n      // otherwise we get an `onScroll` call with the initial scroll position which can break things\n      setCanBindScrollEvent(true)\n    })\n\n    const scrollHandler = useScrollHandlerY(name, {\n      enabled: canBindScrollEvent,\n    })\n\n    React.useEffect(() => {\n      setRef(name, ref)\n    }, [name, ref, setRef])\n\n    const scrollContentSizeChange = useUpdateScrollViewContentSize({\n      name,\n    })\n\n    const scrollContentSizeChangeHandlers = useChainCallback(\n      scrollContentSizeChange,\n      onContentSizeChange\n    )\n\n    return (\n      <Animated.ScrollView\n        {...rest}\n        // @ts-expect-error reanimated types are broken on ref\n        ref={ref}\n        bouncesZoom={false}\n        style={[_style, style]}\n        contentContainerStyle={[\n          _contentContainerStyle,\n          // TODO: investigate types\n          contentContainerStyle as any,\n        ]}\n        onScroll={scrollHandler}\n        onContentSizeChange={scrollContentSizeChangeHandlers}\n        scrollEventThrottle={16}\n        contentInset={{ top: contentInset }}\n        contentOffset={{\n          y: IS_IOS ? -contentInset + scrollYCurrent.value : 0,\n          x: 0,\n        }}\n        automaticallyAdjustContentInsets={false}\n        refreshControl={\n          refreshControl &&\n          React.cloneElement(refreshControl, {\n            progressViewOffset,\n            ...refreshControl.props,\n          })\n        }\n      >\n        {children}\n      </Animated.ScrollView>\n    )\n  }\n)\n"]},"metadata":{},"sourceType":"module"}