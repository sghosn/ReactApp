{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, CLEAR_DATA, USER_NOTIFICATION_STATE_CHANGE } from \"../constants/index\";\nimport { USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_LIKES_STATE_CHANGE } from \"../constants/index\";\nimport firebase from 'firebase';\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n        console.log(\"exists!\");\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"captioncreation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log('does not exist');\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"captioncreation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.query.EP.path.segments[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n\n      for (var i = 0; i < posts.length; i++) {\n        dispatch(fetchUsersFollowingLikes(uid, posts[i].id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var postId = snapshot.ZE.path.segments[3];\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n  };\n}\nexport function fetchUserNotifications() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"notifications\").onSnapshot(function (snapshot) {\n      var notifications = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_NOTIFICATION_STATE_CHANGE,\n        notifications: notifications\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/downloads/PersonalProject/ReactApp/ReactApp/frontend/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","CLEAR_DATA","USER_NOTIFICATION_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_LIKES_STATE_CHANGE","firebase","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","i","length","fetchUsersData","getPosts","getState","found","usersState","users","some","el","user","fetchUsersFollowingPosts","query","EP","path","segments","find","fetchUsersFollowingLikes","postId","ZE","currentUserLike","fetchUserNotifications","notifications"],"mappings":"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","sourcesContent":["import { USER_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, CLEAR_DATA, USER_NOTIFICATION_STATE_CHANGE  } from '../constants/index'\r\nimport { USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_LIKES_STATE_CHANGE } from '../constants/index'\r\nimport firebase from 'firebase'\r\n\r\n\r\nexport function clearData(){\r\n    return((dispatch) => {\r\n        dispatch({type: CLEAR_DATA})\r\n    })\r\n}\r\n\r\nexport function fetchUser(){\r\n    return((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"users\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .get()\r\n            .then((snapshot) => {\r\n                if(snapshot.exists){\r\n                    dispatch({type : USER_STATE_CHANGE, currentUser: snapshot.data()})\r\n                    console.log(\"exists!\")\r\n                }\r\n                else {\r\n                    console.log('does not exist')\r\n                }\r\n            })\r\n    })\r\n\r\n}\r\n\r\nexport function fetchUserPosts(){\r\n    return((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"captioncreation\", \"asc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                let posts = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({type : USER_POSTS_STATE_CHANGE, posts })\r\n            })\r\n    })\r\n\r\n}\r\n\r\nexport function fetchUserFollowing(){\r\n    return((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"following\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userFollowing\")\r\n            .onSnapshot((snapshot) => {\r\n                let following = snapshot.docs.map(doc => {\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n                dispatch({type : USER_FOLLOWING_STATE_CHANGE, following })\r\n                for(let i = 0; i < following.length; i++){\r\n                    dispatch(fetchUsersData(following[i], true))\r\n                }\r\n            })\r\n    })\r\n\r\n}\r\n\r\nexport function fetchUsersData(uid, getPosts){\r\n    return((dispatch, getState) => {\r\n        const found = getState().usersState.users.some(el => el.uid === uid);\r\n\r\n        if(!found){\r\n            firebase.firestore()\r\n            .collection(\"users\")\r\n            .doc(uid)\r\n            .get()\r\n            .then((snapshot) => {\r\n                if(snapshot.exists){\r\n                    let user = snapshot.data();\r\n                    user.uid = snapshot.id;\r\n\r\n                    dispatch({type : USERS_DATA_STATE_CHANGE, user});\r\n                }\r\n                else {\r\n                    console.log('does not exist')\r\n                }\r\n            })\r\n            if(getPosts){\r\n                dispatch(fetchUsersFollowingPosts(uid));\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function fetchUsersFollowingPosts(uid){\r\n    return((dispatch, getState) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"captioncreation\", \"asc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n\r\n                const uid = snapshot.query.EP.path.segments[1];\r\n                const user = getState().usersState.users.find(el => el.uid === uid);\r\n\r\n                let posts = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data, user }\r\n                })\r\n\r\n                for(let i = 0; i < posts.length; i++){\r\n                    dispatch(fetchUsersFollowingLikes(uid, posts[i].id))\r\n                }\r\n                dispatch({type : USERS_POSTS_STATE_CHANGE, posts, uid })\r\n            })\r\n    })\r\n\r\n}\r\n\r\nexport function fetchUsersFollowingLikes(uid, postId){\r\n    return((dispatch, getState) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(uid)\r\n            .collection(\"userPosts\")\r\n            .doc(postId)\r\n            .collection(\"likes\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .onSnapshot((snapshot) => {\r\n\r\n                const postId = snapshot.ZE.path.segments[3];\r\n                \r\n                let currentUserLike = false;\r\n                if(snapshot.exists){\r\n                    currentUserLike = true;\r\n                }\r\n\r\n                dispatch({type : USERS_LIKES_STATE_CHANGE, postId, currentUserLike })\r\n            })\r\n    })\r\n\r\n}\r\n\r\nexport function fetchUserNotifications(){\r\n    return((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"notifications\")\r\n            .onSnapshot((snapshot) => {\r\n                let notifications = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({type : USER_NOTIFICATION_STATE_CHANGE, notifications })\r\n            })\r\n    })\r\n\r\n}"]},"metadata":{},"sourceType":"module"}