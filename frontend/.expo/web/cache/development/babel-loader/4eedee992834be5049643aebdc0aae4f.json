{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"contentContainerStyle\", \"style\", \"onContentSizeChange\", \"refreshControl\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { AnimatedFlatList, IS_IOS } from \"./helpers\";\nimport { useAfterMountEffect, useChainCallback, useCollapsibleStyle, useScrollHandlerY, useSharedAnimatedRef, useTabNameContext, useTabsContext, useUpdateScrollViewContentSize } from \"./hooks\";\n\nfunction FlatListImpl(_ref, passRef) {\n  var contentContainerStyle = _ref.contentContainerStyle,\n      style = _ref.style,\n      onContentSizeChange = _ref.onContentSizeChange,\n      refreshControl = _ref.refreshControl,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var name = useTabNameContext();\n\n  var _useTabsContext = useTabsContext(),\n      setRef = _useTabsContext.setRef,\n      contentInset = _useTabsContext.contentInset,\n      scrollYCurrent = _useTabsContext.scrollYCurrent;\n\n  var ref = useSharedAnimatedRef(passRef);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      canBindScrollEvent = _React$useState2[0],\n      setCanBindScrollEvent = _React$useState2[1];\n\n  useAfterMountEffect(function () {\n    setCanBindScrollEvent(true);\n  });\n  var scrollHandler = useScrollHandlerY(name, {\n    enabled: canBindScrollEvent\n  });\n\n  var _useCollapsibleStyle = useCollapsibleStyle(),\n      _style = _useCollapsibleStyle.style,\n      _contentContainerStyle = _useCollapsibleStyle.contentContainerStyle,\n      progressViewOffset = _useCollapsibleStyle.progressViewOffset;\n\n  React.useEffect(function () {\n    setRef(name, ref);\n  }, [name, ref, setRef]);\n  var scrollContentSizeChange = useUpdateScrollViewContentSize({\n    name: name\n  });\n  var scrollContentSizeChangeHandlers = useChainCallback(scrollContentSizeChange, onContentSizeChange);\n  return React.createElement(AnimatedFlatList, _extends({}, rest, {\n    ref: ref,\n    bouncesZoom: false,\n    style: [_style, style],\n    contentContainerStyle: [_contentContainerStyle, contentContainerStyle],\n    progressViewOffset: progressViewOffset,\n    onScroll: scrollHandler,\n    onContentSizeChange: scrollContentSizeChangeHandlers,\n    scrollEventThrottle: 16,\n    contentInset: {\n      top: contentInset\n    },\n    contentOffset: {\n      y: IS_IOS ? -contentInset + scrollYCurrent.value : 0,\n      x: 0\n    },\n    automaticallyAdjustContentInsets: false,\n    refreshControl: refreshControl && React.cloneElement(refreshControl, _objectSpread({\n      progressViewOffset: progressViewOffset\n    }, refreshControl.props))\n  }));\n}\n\nexport var FlatList = React.forwardRef(FlatListImpl);","map":{"version":3,"sources":["FlatList.tsx"],"names":["rest","name","useTabNameContext","scrollYCurrent","useTabsContext","ref","useSharedAnimatedRef","React","useAfterMountEffect","setCanBindScrollEvent","scrollHandler","useScrollHandlerY","enabled","canBindScrollEvent","style","contentContainerStyle","progressViewOffset","useCollapsibleStyle","setRef","scrollContentSizeChange","useUpdateScrollViewContentSize","scrollContentSizeChangeHandlers","useChainCallback","top","contentInset","y","IS_IOS","x","refreshControl","props","FlatList"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AAGA,SAAA,gBAAA,EAAA,MAAA;AACA,SAAA,mBAAA,EAAA,gBAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,8BAAA;;AAWA,SAAA,YAAA,OAAA,OAAA,EASsB;AAAA,MARpB,qBAQoB,QARpB,qBAQoB;AAAA,MARpB,KAQoB,QARpB,KAQoB;AAAA,MARpB,mBAQoB,QARpB,mBAQoB;AAAA,MARpB,cAQoB,QARpB,cAQoB;AAAA,MAHfA,IAGe;;AACpB,MAAMC,IAAI,GAAGC,iBAAb,EAAA;;AACA,wBAAiDE,cAAjD,EAAA;AAAA,MAAM,MAAN,mBAAM,MAAN;AAAA,MAAM,YAAN,mBAAM,YAAN;AAAA,MAA8BD,cAA9B,mBAA8BA,cAA9B;;AACA,MAAME,GAAG,GAAGC,oBAAoB,CAAhC,OAAgC,CAAhC;;AACA,wBAAoDC,KAAK,CAALA,QAAAA,CAApD,KAAoDA,CAApD;AAAA;AAAA,MAAM,kBAAN;AAAA,MAAM,qBAAN;;AAEAC,EAAAA,mBAAmB,CAAC,YAAM;AAGxBC,IAAAA,qBAAqB,CAArBA,IAAqB,CAArBA;AAHFD,GAAmB,CAAnBA;AAMA,MAAME,aAAa,GAAGC,iBAAiB,CAAA,IAAA,EAAO;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAP,CAAvC;;AACA,6BAIII,mBAJJ,EAAA;AAAA,MAAM,MAAN,wBACEH,KADF;AAAA,MAAM,sBAAN,wBAEEC,qBAFF;AAAA,MAGEC,kBAHF,wBAGEA,kBAHF;;AAMAT,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBW,IAAAA,MAAM,CAAA,IAAA,EAANA,GAAM,CAANA;AADFX,GAAAA,EAEG,CAAA,IAAA,EAAA,GAAA,EAFHA,MAEG,CAFHA;AAIA,MAAMY,uBAAuB,GAAGC,8BAA8B,CAAC;AAC7DnB,IAAAA,IAAAA,EAAAA;AAD6D,GAAD,CAA9D;AAIA,MAAMoB,+BAA+B,GAAGC,gBAAgB,CAAA,uBAAA,EAAxD,mBAAwD,CAAxD;AAKA,SACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAGE,IAAA,GAAG,EAHL,GAAA;AAIE,IAAA,WAAW,EAJb,KAAA;AAKE,IAAA,KAAK,EAAE,CAAA,MAAA,EALT,KAKS,CALT;AAME,IAAA,qBAAqB,EAAE,CAAA,sBAAA,EANzB,qBAMyB,CANzB;AAOE,IAAA,kBAAkB,EAPpB,kBAAA;AAQE,IAAA,QAAQ,EARV,aAAA;AASE,IAAA,mBAAmB,EATrB,+BAAA;AAUE,IAAA,mBAAmB,EAVrB,EAAA;AAWE,IAAA,YAAY,EAAE;AAAEC,MAAAA,GAAG,EAAEC;AAAP,KAXhB;AAYE,IAAA,aAAa,EAAE;AACbC,MAAAA,CAAC,EAAEC,MAAM,GAAG,CAAA,YAAA,GAAgBvB,cAAc,CAAjC,KAAA,GADI,CAAA;AAEbwB,MAAAA,CAAC,EAAE;AAFU,KAZjB;AAgBE,IAAA,gCAAgC,EAhBlC,KAAA;AAiBE,IAAA,cAAc,EACZC,cAAc,IACd,KAAK,CAAL,YAAA,CAAA,cAAA;AACEZ,MAAAA,kBADiC,EACjCA;AADF,OAEKY,cAAc,CAACC,KAFpB;AAnBJ,GAAA,CAAA,CADF;AA2BD;;AAKD,OAAO,IAAMC,QAAQ,GAAGvB,KAAK,CAALA,UAAAA,CAAjB,YAAiBA,CAAjB","sourcesContent":["import React from 'react'\nimport { FlatList as RNFlatList, FlatListProps } from 'react-native'\n\nimport { AnimatedFlatList, IS_IOS } from './helpers'\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\nfunction FlatListImpl<R>(\n  {\n    contentContainerStyle,\n    style,\n    onContentSizeChange,\n    refreshControl,\n    ...rest\n  }: Omit<FlatListProps<R>, 'onScroll'>,\n  passRef: React.Ref<RNFlatList>\n): React.ReactElement {\n  const name = useTabNameContext()\n  const { setRef, contentInset, scrollYCurrent } = useTabsContext()\n  const ref = useSharedAnimatedRef<RNFlatList<unknown>>(passRef)\n  const [canBindScrollEvent, setCanBindScrollEvent] = React.useState(false)\n\n  useAfterMountEffect(() => {\n    // we enable the scroll event after mounting\n    // otherwise we get an `onScroll` call with the initial scroll position which can break things\n    setCanBindScrollEvent(true)\n  })\n\n  const scrollHandler = useScrollHandlerY(name, { enabled: canBindScrollEvent })\n  const {\n    style: _style,\n    contentContainerStyle: _contentContainerStyle,\n    progressViewOffset,\n  } = useCollapsibleStyle()\n\n  React.useEffect(() => {\n    setRef(name, ref)\n  }, [name, ref, setRef])\n\n  const scrollContentSizeChange = useUpdateScrollViewContentSize({\n    name,\n  })\n\n  const scrollContentSizeChangeHandlers = useChainCallback(\n    scrollContentSizeChange,\n    onContentSizeChange\n  )\n\n  return (\n    <AnimatedFlatList\n      {...rest}\n      // @ts-expect-error problem with reanimated types, they're missing `ref`\n      ref={ref}\n      bouncesZoom={false}\n      style={[_style, style]}\n      contentContainerStyle={[_contentContainerStyle, contentContainerStyle]}\n      progressViewOffset={progressViewOffset}\n      onScroll={scrollHandler}\n      onContentSizeChange={scrollContentSizeChangeHandlers}\n      scrollEventThrottle={16}\n      contentInset={{ top: contentInset }}\n      contentOffset={{\n        y: IS_IOS ? -contentInset + scrollYCurrent.value : 0,\n        x: 0,\n      }}\n      automaticallyAdjustContentInsets={false}\n      refreshControl={\n        refreshControl &&\n        React.cloneElement(refreshControl, {\n          progressViewOffset,\n          ...refreshControl.props,\n        })\n      }\n    />\n  )\n}\n\n/**\n * Use like a regular FlatList.\n */\nexport const FlatList = React.forwardRef(FlatListImpl) as <T>(\n  p: FlatListProps<T> & { ref?: React.Ref<RNFlatList<T>> }\n) => React.ReactElement\n"]},"metadata":{},"sourceType":"module"}