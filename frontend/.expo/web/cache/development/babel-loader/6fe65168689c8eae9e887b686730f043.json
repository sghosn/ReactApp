{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated, { useSharedValue, useAnimatedReaction, runOnJS, useDerivedValue, withTiming, useAnimatedStyle } from 'react-native-reanimated';\nimport { ScrollView } from \"./ScrollView\";\nimport { useScroller, useTabNameContext, useTabsContext } from \"./hooks\";\nexport var Lazy = function Lazy(_ref) {\n  var children = _ref.children,\n      startMounted = _ref.startMounted,\n      cancelLazyFadeIn = _ref.cancelLazyFadeIn;\n  var name = useTabNameContext();\n\n  var _useTabsContext = useTabsContext(),\n      focusedTab = _useTabsContext.focusedTab,\n      refMap = _useTabsContext.refMap,\n      scrollY = _useTabsContext.scrollY,\n      tabNames = _useTabsContext.tabNames;\n\n  var _React$useState = React.useState(!!startMounted),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      canMount = _React$useState2[0],\n      setCanMount = _React$useState2[1];\n\n  var _React$useState3 = React.useState(!!startMounted),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      afterMount = _React$useState4[0],\n      setAfterMount = _React$useState4[1];\n\n  var isSelfMounted = React.useRef(true);\n  var opacity = useSharedValue(cancelLazyFadeIn || startMounted ? 1 : 0, false);\n  React.useEffect(function () {\n    return function () {\n      isSelfMounted.current = false;\n    };\n  }, []);\n  var allowToMount = React.useCallback(function () {\n    setTimeout(function () {\n      if (focusedTab.value === name) {\n        if (isSelfMounted.current) setCanMount(true);\n        setTimeout(function () {\n          if (isSelfMounted.current) setAfterMount(true);\n        }, 10);\n      }\n    }, 50);\n  }, [focusedTab.value, name]);\n  useAnimatedReaction(function () {\n    return focusedTab.value === name;\n  }, function (focused) {\n    if (focused && !canMount) {\n      runOnJS(allowToMount)();\n    }\n  }, [canMount, focusedTab]);\n  var scrollTo = useScroller();\n  var ref = name ? refMap[name] : null;\n  useDerivedValue(function () {\n    if (afterMount) {\n      var tabIndex = tabNames.value.findIndex(function (n) {\n        return n === name;\n      });\n\n      if (ref && tabIndex >= 0) {\n        scrollTo(ref, 0, scrollY.value[tabIndex], false, \"[\".concat(name, \"] lazy sync\"));\n      }\n\n      if (!cancelLazyFadeIn && opacity.value !== 1) opacity.value = withTiming(1);\n    }\n  }, [ref, cancelLazyFadeIn, opacity, name, afterMount, tabNames, scrollTo]);\n  var stylez = useAnimatedStyle(function () {\n    return {\n      opacity: opacity.value\n    };\n  }, []);\n  return canMount ? cancelLazyFadeIn ? children : React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: [styles.container, !cancelLazyFadeIn && stylez]\n  }, children) : React.createElement(ScrollView, null);\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["Lazy.tsx"],"names":["Lazy","cancelLazyFadeIn","name","useTabNameContext","tabNames","useTabsContext","React","isSelfMounted","opacity","useSharedValue","allowToMount","setTimeout","focusedTab","setCanMount","setAfterMount","useAnimatedReaction","focused","runOnJS","scrollTo","useScroller","ref","refMap","useDerivedValue","tabIndex","n","scrollY","withTiming","stylez","useAnimatedStyle","value","canMount","styles","container","flex"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { StyleSheet } from 'react-native'\nimport Animated, {\n  useSharedValue,\n  useAnimatedReaction,\n  runOnJS,\n  useDerivedValue,\n  withTiming,\n  useAnimatedStyle,\n} from 'react-native-reanimated'\n\nimport { ScrollView } from './ScrollView'\nimport { useScroller, useTabNameContext, useTabsContext } from './hooks'\n\n/**\n * Typically used internally, but if you want to mix lazy and regular screens you can wrap the lazy ones with this component.\n */\nexport const Lazy: React.FC<{\n  startMounted?: boolean\n  cancelLazyFadeIn?: boolean\n  children: React.ReactElement\n}> = ({ children, startMounted, cancelLazyFadeIn }) => {\n  const name = useTabNameContext()\n  const { focusedTab, refMap, scrollY, tabNames } = useTabsContext()\n  const [canMount, setCanMount] = React.useState(!!startMounted)\n  const [afterMount, setAfterMount] = React.useState(!!startMounted)\n  const isSelfMounted = React.useRef(true)\n\n  const opacity = useSharedValue(\n    cancelLazyFadeIn || startMounted ? 1 : 0,\n    false\n  )\n\n  React.useEffect(() => {\n    return () => {\n      isSelfMounted.current = false\n    }\n  }, [])\n\n  const allowToMount = React.useCallback(() => {\n    // wait the scene to be at least 50 ms focused, before mounting\n    setTimeout(() => {\n      if (focusedTab.value === name) {\n        if (isSelfMounted.current) setCanMount(true)\n        // we need to wait for the children rendering to complete so that we can scroll properly\n        setTimeout(() => {\n          if (isSelfMounted.current) setAfterMount(true)\n        }, 10)\n      }\n    }, 50)\n  }, [focusedTab.value, name])\n\n  useAnimatedReaction(\n    () => {\n      return focusedTab.value === name\n    },\n    (focused) => {\n      if (focused && !canMount) {\n        runOnJS(allowToMount)()\n      }\n    },\n    [canMount, focusedTab]\n  )\n\n  const scrollTo = useScroller()\n\n  const ref = name ? refMap[name] : null\n\n  useDerivedValue(() => {\n    if (afterMount) {\n      const tabIndex = tabNames.value.findIndex((n) => n === name)\n      if (ref && tabIndex >= 0) {\n        scrollTo(ref, 0, scrollY.value[tabIndex], false, `[${name}] lazy sync`)\n      }\n      if (!cancelLazyFadeIn && opacity.value !== 1)\n        opacity.value = withTiming(1)\n    }\n  }, [ref, cancelLazyFadeIn, opacity, name, afterMount, tabNames, scrollTo])\n\n  const stylez = useAnimatedStyle(() => {\n    return {\n      opacity: opacity.value,\n    }\n  }, [])\n\n  return canMount ? (\n    cancelLazyFadeIn ? (\n      children\n    ) : (\n      <Animated.View\n        pointerEvents=\"box-none\"\n        style={[styles.container, !cancelLazyFadeIn && stylez]}\n      >\n        {children}\n      </Animated.View>\n    )\n  ) : (\n    <ScrollView />\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}