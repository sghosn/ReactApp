{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Animated, { cancelAnimation, scrollTo, useAnimatedReaction, useAnimatedRef, useAnimatedScrollHandler, useSharedValue, withTiming } from 'react-native-reanimated';\nimport { Indicator } from \"./Indicator\";\nimport { MaterialTabItem } from \"./TabItem\";\nexport var TABBAR_HEIGHT = 48;\n\nvar MaterialTabBar = function MaterialTabBar(_ref) {\n  var tabNames = _ref.tabNames,\n      indexDecimal = _ref.indexDecimal,\n      _ref$scrollEnabled = _ref.scrollEnabled,\n      scrollEnabled = _ref$scrollEnabled === void 0 ? false : _ref$scrollEnabled,\n      indicatorStyle = _ref.indicatorStyle,\n      index = _ref.index,\n      _ref$TabItemComponent = _ref.TabItemComponent,\n      TabItemComponent = _ref$TabItemComponent === void 0 ? MaterialTabItem : _ref$TabItemComponent,\n      _ref$getLabelText = _ref.getLabelText,\n      getLabelText = _ref$getLabelText === void 0 ? function (name) {\n    return String(name).toUpperCase();\n  } : _ref$getLabelText,\n      onTabPress = _ref.onTabPress,\n      style = _ref.style,\n      tabProps = _ref.tabProps,\n      contentContainerStyle = _ref.contentContainerStyle,\n      labelStyle = _ref.labelStyle,\n      inactiveColor = _ref.inactiveColor,\n      activeColor = _ref.activeColor,\n      tabStyle = _ref.tabStyle;\n  var tabBarRef = useAnimatedRef();\n  var windowWidth = useWindowDimensions().width;\n  var isFirstRender = React.useRef(true);\n\n  var _React$useState = React.useState(new Map()),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      itemsLayoutGathering = _React$useState2[0],\n      setItemsLayoutGathering = _React$useState2[1];\n\n  var tabsOffset = useSharedValue(0);\n  var isScrolling = useSharedValue(false);\n  var nTabs = tabNames.length;\n\n  var _React$useState3 = React.useState(scrollEnabled ? [] : tabNames.map(function (_, i) {\n    var tabWidth = windowWidth / nTabs;\n    return {\n      width: tabWidth,\n      x: i * tabWidth\n    };\n  })),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      itemsLayout = _React$useState4[0],\n      setItemsLayout = _React$useState4[1];\n\n  React.useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else if (!scrollEnabled) {\n      var tabWidth = windowWidth / nTabs;\n      setItemsLayout(tabNames.map(function (_, i) {\n        return {\n          width: tabWidth,\n          x: i * tabWidth\n        };\n      }));\n    }\n  }, [scrollEnabled, nTabs, tabNames, windowWidth]);\n  var onTabItemLayout = React.useCallback(function (event, name) {\n    if (scrollEnabled) {\n      var _event$nativeEvent;\n\n      if (!((_event$nativeEvent = event.nativeEvent) !== null && _event$nativeEvent !== void 0 && _event$nativeEvent.layout)) return;\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          width = _event$nativeEvent$la.width,\n          x = _event$nativeEvent$la.x;\n      setItemsLayoutGathering(function (itemsLayoutGathering) {\n        var update = new Map(itemsLayoutGathering);\n        return update.set(name, {\n          width: width,\n          x: x\n        });\n      });\n    }\n  }, [scrollEnabled]);\n  React.useEffect(function () {\n    var layout = Array.from(itemsLayoutGathering.entries()).filter(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n          tabName = _ref3[0];\n\n      return tabNames.includes(tabName);\n    }).map(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n          layout = _ref5[1];\n\n      return layout;\n    }).sort(function (a, b) {\n      return a.x - b.x;\n    });\n\n    if (layout.length === tabNames.length) {\n      setItemsLayout(layout);\n    }\n  }, [itemsLayoutGathering, tabNames]);\n  var cancelNextScrollSync = useSharedValue(index.value);\n  var onScroll = useAnimatedScrollHandler({\n    onScroll: function onScroll(event) {\n      tabsOffset.value = event.contentOffset.x;\n    },\n    onBeginDrag: function onBeginDrag() {\n      isScrolling.value = true;\n      cancelNextScrollSync.value = index.value;\n    },\n    onMomentumEnd: function onMomentumEnd() {\n      isScrolling.value = false;\n    }\n  }, []);\n  var currentIndexToSync = useSharedValue(index.value);\n  var targetIndexToSync = useSharedValue(index.value);\n  useAnimatedReaction(function () {\n    return index.value;\n  }, function (nextIndex) {\n    if (scrollEnabled) {\n      cancelAnimation(currentIndexToSync);\n      targetIndexToSync.value = nextIndex;\n      currentIndexToSync.value = withTiming(nextIndex);\n    }\n  }, [scrollEnabled]);\n  useAnimatedReaction(function () {\n    return currentIndexToSync.value === targetIndexToSync.value;\n  }, function (canSync) {\n    if (canSync && scrollEnabled && itemsLayout.length === nTabs && itemsLayout[index.value]) {\n      var halfTab = itemsLayout[index.value].width / 2;\n      var offset = itemsLayout[index.value].x;\n\n      if (offset < tabsOffset.value || offset > tabsOffset.value + windowWidth - 2 * halfTab) {\n        scrollTo(tabBarRef, offset - windowWidth / 2 + halfTab, 0, true);\n      }\n    }\n  }, [scrollEnabled, itemsLayout, nTabs]);\n  return React.createElement(Animated.ScrollView, {\n    ref: tabBarRef,\n    horizontal: true,\n    style: style,\n    contentContainerStyle: [styles.contentContainer, !scrollEnabled && {\n      width: windowWidth\n    }, contentContainerStyle],\n    keyboardShouldPersistTaps: \"handled\",\n    bounces: false,\n    alwaysBounceHorizontal: false,\n    scrollsToTop: false,\n    showsHorizontalScrollIndicator: false,\n    automaticallyAdjustContentInsets: false,\n    overScrollMode: \"never\",\n    scrollEnabled: scrollEnabled,\n    onScroll: scrollEnabled ? onScroll : undefined,\n    scrollEventThrottle: 16\n  }, tabNames.map(function (name, i) {\n    var _tabProps$get;\n\n    return React.createElement(TabItemComponent, {\n      key: name,\n      index: i,\n      name: name,\n      label: ((_tabProps$get = tabProps.get(name)) === null || _tabProps$get === void 0 ? void 0 : _tabProps$get.label) || getLabelText(name),\n      onPress: onTabPress,\n      onLayout: scrollEnabled ? function (event) {\n        return onTabItemLayout(event, name);\n      } : undefined,\n      scrollEnabled: scrollEnabled,\n      indexDecimal: indexDecimal,\n      labelStyle: labelStyle,\n      activeColor: activeColor,\n      inactiveColor: inactiveColor,\n      style: tabStyle\n    });\n  }), itemsLayout.length === nTabs && React.createElement(Indicator, {\n    indexDecimal: indexDecimal,\n    itemsLayout: itemsLayout,\n    fadeIn: scrollEnabled,\n    style: indicatorStyle\n  }));\n};\n\nvar MemoizedTabBar = React.memo(MaterialTabBar);\nexport { MemoizedTabBar as MaterialTabBar };\nvar styles = StyleSheet.create({\n  contentContainer: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  }\n});","map":{"version":3,"sources":["TabBar.tsx"],"names":["TABBAR_HEIGHT","MaterialTabBar","scrollEnabled","TabItemComponent","getLabelText","name","String","tabStyle","tabBarRef","useAnimatedRef","windowWidth","useWindowDimensions","isFirstRender","React","tabsOffset","useSharedValue","isScrolling","nTabs","tabNames","tabWidth","width","x","i","setItemsLayout","onTabItemLayout","event","setItemsLayoutGathering","itemsLayoutGathering","update","layout","Array","a","b","cancelNextScrollSync","index","onScroll","useAnimatedScrollHandler","onBeginDrag","onMomentumEnd","currentIndexToSync","targetIndexToSync","useAnimatedReaction","nextIndex","cancelAnimation","withTiming","canSync","itemsLayout","halfTab","offset","scrollTo","styles","indicatorStyle","MemoizedTabBar","contentContainer","flexDirection","flexWrap"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n  StyleSheet,\n  useWindowDimensions,\n  LayoutChangeEvent,\n} from 'react-native'\nimport Animated, {\n  cancelAnimation,\n  scrollTo,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useAnimatedScrollHandler,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated'\n\nimport { TabName } from '../types'\nimport { Indicator } from './Indicator'\nimport { MaterialTabItem } from './TabItem'\nimport { MaterialTabBarProps, ItemLayout } from './types'\n\nexport const TABBAR_HEIGHT = 48\n\n/**\n * Basic usage looks like this:\n *\n * ```tsx\n * <Tabs.Container\n *   ...\n *   TabBarComponent={(props) => (\n *     <MaterialTabBar\n *       {...props}\n *       activeColor=\"red\"\n *       inactiveColor=\"yellow\"\n *       inactiveOpacity={1}\n *       labelStyle={{ fontSize: 14 }}\n *     />\n *   )}\n * >\n *   {...}\n * </Tabs.Container>\n * ```\n */\nconst MaterialTabBar = <T extends TabName = any>({\n  tabNames,\n  indexDecimal,\n  scrollEnabled = false,\n  indicatorStyle,\n  index,\n  TabItemComponent = MaterialTabItem,\n  getLabelText = (name) => String(name).toUpperCase(),\n  onTabPress,\n  style,\n  tabProps,\n  contentContainerStyle,\n  labelStyle,\n  inactiveColor,\n  activeColor,\n  tabStyle,\n}: MaterialTabBarProps<T>): React.ReactElement => {\n  const tabBarRef = useAnimatedRef<Animated.ScrollView>()\n  const windowWidth = useWindowDimensions().width\n  const isFirstRender = React.useRef(true)\n  const [itemsLayoutGathering, setItemsLayoutGathering] = React.useState(\n    new Map<T, ItemLayout>()\n  )\n  const tabsOffset = useSharedValue(0)\n  const isScrolling = useSharedValue(false)\n\n  const nTabs = tabNames.length\n\n  const [itemsLayout, setItemsLayout] = React.useState<ItemLayout[]>(\n    scrollEnabled\n      ? []\n      : tabNames.map((_, i) => {\n          const tabWidth = windowWidth / nTabs\n          return { width: tabWidth, x: i * tabWidth }\n        })\n  )\n\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false\n    } else if (!scrollEnabled) {\n      // update items width on window resizing\n      const tabWidth = windowWidth / nTabs\n      setItemsLayout(\n        tabNames.map((_, i) => {\n          return { width: tabWidth, x: i * tabWidth }\n        })\n      )\n    }\n  }, [scrollEnabled, nTabs, tabNames, windowWidth])\n\n  const onTabItemLayout = React.useCallback(\n    (event: LayoutChangeEvent, name: T) => {\n      if (scrollEnabled) {\n        if (!event.nativeEvent?.layout) return\n        const { width, x } = event.nativeEvent.layout\n        setItemsLayoutGathering((itemsLayoutGathering) => {\n          const update = new Map(itemsLayoutGathering)\n          return update.set(name, {\n            width,\n            x,\n          })\n        })\n      }\n    },\n    [scrollEnabled]\n  )\n\n  React.useEffect(() => {\n    // pick out the layouts for the tabs we know about (in case they changed dynamically)\n    const layout = Array.from(itemsLayoutGathering.entries())\n      .filter(([tabName]) => tabNames.includes(tabName))\n      .map(([, layout]) => layout)\n      .sort((a, b) => a.x - b.x)\n\n    if (layout.length === tabNames.length) {\n      setItemsLayout(layout)\n    }\n  }, [itemsLayoutGathering, tabNames])\n\n  const cancelNextScrollSync = useSharedValue(index.value)\n\n  const onScroll = useAnimatedScrollHandler(\n    {\n      onScroll: (event) => {\n        tabsOffset.value = event.contentOffset.x\n      },\n      onBeginDrag: () => {\n        isScrolling.value = true\n        cancelNextScrollSync.value = index.value\n      },\n      onMomentumEnd: () => {\n        isScrolling.value = false\n      },\n    },\n    []\n  )\n\n  const currentIndexToSync = useSharedValue(index.value)\n  const targetIndexToSync = useSharedValue(index.value)\n\n  useAnimatedReaction(\n    () => {\n      return index.value\n    },\n    (nextIndex) => {\n      if (scrollEnabled) {\n        cancelAnimation(currentIndexToSync)\n        targetIndexToSync.value = nextIndex\n        currentIndexToSync.value = withTiming(nextIndex)\n      }\n    },\n    [scrollEnabled]\n  )\n\n  useAnimatedReaction(\n    () => {\n      return currentIndexToSync.value === targetIndexToSync.value\n    },\n    (canSync) => {\n      if (\n        canSync &&\n        scrollEnabled &&\n        itemsLayout.length === nTabs &&\n        itemsLayout[index.value]\n      ) {\n        const halfTab = itemsLayout[index.value].width / 2\n        const offset = itemsLayout[index.value].x\n        if (\n          offset < tabsOffset.value ||\n          offset > tabsOffset.value + windowWidth - 2 * halfTab\n        ) {\n          scrollTo(tabBarRef, offset - windowWidth / 2 + halfTab, 0, true)\n        }\n      }\n    },\n    [scrollEnabled, itemsLayout, nTabs]\n  )\n  return (\n    <Animated.ScrollView\n      ref={tabBarRef}\n      horizontal\n      style={style}\n      contentContainerStyle={[\n        styles.contentContainer,\n        !scrollEnabled && { width: windowWidth },\n        contentContainerStyle,\n      ]}\n      keyboardShouldPersistTaps=\"handled\"\n      bounces={false}\n      alwaysBounceHorizontal={false}\n      scrollsToTop={false}\n      showsHorizontalScrollIndicator={false}\n      automaticallyAdjustContentInsets={false}\n      overScrollMode=\"never\"\n      scrollEnabled={scrollEnabled}\n      onScroll={scrollEnabled ? onScroll : undefined}\n      scrollEventThrottle={16}\n    >\n      {tabNames.map((name, i) => {\n        return (\n          <TabItemComponent\n            key={name}\n            index={i}\n            name={name}\n            label={tabProps.get(name)?.label || getLabelText(name)}\n            onPress={onTabPress}\n            onLayout={\n              scrollEnabled\n                ? (event) => onTabItemLayout(event, name)\n                : undefined\n            }\n            scrollEnabled={scrollEnabled}\n            indexDecimal={indexDecimal}\n            labelStyle={labelStyle}\n            activeColor={activeColor}\n            inactiveColor={inactiveColor}\n            style={tabStyle}\n          />\n        )\n      })}\n      {itemsLayout.length === nTabs && (\n        <Indicator\n          indexDecimal={indexDecimal}\n          itemsLayout={itemsLayout}\n          fadeIn={scrollEnabled}\n          style={indicatorStyle}\n        />\n      )}\n    </Animated.ScrollView>\n  )\n}\n\nconst MemoizedTabBar = React.memo(MaterialTabBar)\n\nexport { MemoizedTabBar as MaterialTabBar }\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}